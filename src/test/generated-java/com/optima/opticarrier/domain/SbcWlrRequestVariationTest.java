/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.optima.opticarrier.domain;

import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.util.*;

import org.junit.Test;

import com.optima.opticarrier.util.ValueGenerator;

/**
 * Basic tests for SbcWlrRequestVariation
 */
@SuppressWarnings("unused")
public class SbcWlrRequestVariationTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        SbcWlrRequestVariation model = new SbcWlrRequestVariation();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        SbcWlrRequestVariation model = new SbcWlrRequestVariation();
        model.setId(ValueGenerator.getUniqueInteger());
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  SbcWlrRequestVariation.olo ==> OloCps.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setOlo() {
        SbcWlrRequestVariation many = new SbcWlrRequestVariation();

        // init
        OloCps one = new OloCps();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setOlo(one);

        // make sure it is propagated properly
        assertThat(many.getOlo()).isEqualTo(one);

        // now set it to back to null
        many.setOlo(null);

        // make sure null is propagated properly
        assertThat(many.getOlo()).isNull();
    }

    @Test
    public void manyToOne_setFile() {
        SbcWlrRequestVariation many = new SbcWlrRequestVariation();

        // init
        SbcFileRequest one = new SbcFileRequest();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setFile(one);

        // make sure it is propagated properly
        assertThat(many.getFile()).isEqualTo(one);

        // now set it to back to null
        many.setFile(null);

        // make sure null is propagated properly
        assertThat(many.getFile()).isNull();
    }

    /*
     public void equalsUsingPk() {
     SbcWlrRequestVariation model1 = new SbcWlrRequestVariation();
     SbcWlrRequestVariation model2 = new SbcWlrRequestVariation();

     Integer id = ValueGenerator.getUniqueInteger();
     model1.setId(id);
     model2.setId(id);

     model1.setProgressiveRichiesta("a");
     model2.setProgressiveRichiesta("a");

     model1.setActionType(1);
     model2.setActionType(1);

     model1.setWlrType(1);
     model2.setWlrType(1);

     model1.setDn("a");
     model2.setDn("a");

     model1.setDataSottoscrizioneContratto(new Date());
     model2.setDataSottoscrizioneContratto(new Date());

     model1.setCustomerSurname("a");
     model2.setCustomerSurname("a");

     model1.setServiceNumber("a");
     model2.setServiceNumber("a");

     model1.setNumberAdditional("a");
     model2.setNumberAdditional("a");

     model1.setCodicePrestazione("a");
     model2.setCodicePrestazione("a");

     model1.setAggiuntivo1("a");
     model2.setAggiuntivo1("a");

     model1.setAggiuntivo2("a");
     model2.setAggiuntivo2("a");

     model1.setAggiuntivo3("a");
     model2.setAggiuntivo3("a");

     model1.setAggiuntivo4("a");
     model2.setAggiuntivo4("a");

     model1.setAggiuntivo5("a");
     model2.setAggiuntivo5("a");

     model1.setAggiuntivo6("a");
     model2.setAggiuntivo6("a");

     model1.setAggiuntivo7("a");
     model2.setAggiuntivo7("a");

     model1.setCodeMove("a");
     model2.setCodeMove("a");

     model1.setLineNumber("a");
     model2.setLineNumber("a");

     model1.setDirectionality("a");
     model2.setDirectionality("a");

     model1.setCodeDriveType("a");
     model2.setCodeDriveType("a");

     model1.setStatus("a");
     model2.setStatus("a");

     model1.setWaits(1);
     model2.setWaits(1);

     model1.setElaborated(true);
     model2.setElaborated(true);
     assertThat(model1.isIdSet()).isTrue();
     assertThat(model2.isIdSet()).isTrue();
     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
     assertThat(model1).isEqualTo(model2);
     assertThat(model2).isEqualTo(model1);
     }
     */
}