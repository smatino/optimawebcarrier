/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/support/element/WebElementConfiguration.p.vm.java
 */
package com.optima.opticarrier.web.selenium.support.elements;

import static com.google.common.base.Throwables.propagate;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.internal.Locatable;
import org.openqa.selenium.internal.WrapsElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.DefaultElementLocatorFactory;
import org.openqa.selenium.support.pagefactory.ElementLocator;
import org.openqa.selenium.support.pagefactory.ElementLocatorFactory;
import org.openqa.selenium.support.pagefactory.FieldDecorator;
import org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler;

import com.optima.opticarrier.web.selenium.support.Page;
import com.optima.opticarrier.web.selenium.support.WebClient;

public class WebElementConfiguration {
    public void configure(Object page, WebClient webClient) {
        try {
            buildPages(page, page.getClass(), webClient);
        } catch (Exception e) {
            throw propagate(e);
        }
    }

    private void buildPages(Object object, Class<?> clazz, WebClient webClient) throws Exception {
        for (Field field : clazz.getDeclaredFields()) {
            if (field.getType().isAnnotationPresent(Page.class)) {
                field.setAccessible(true);
                field.set(object, initPage(field, webClient));
            }
        }
        if (clazz.getSuperclass() != null) {
            buildPages(object, clazz.getSuperclass(), webClient);
        }
    }

    private void setupCustomWebElements(Object object, WebClient webClient) throws Exception {
        FieldDecorator fieldDecorator = new AnotherFieldDecorator(new DefaultElementLocatorFactory(webClient.webDriver));
        setupCustomWebElementsForClass(object, object.getClass(), fieldDecorator, webClient);
    }

    private void setupCustomWebElementsForClass(Object object, Class<?> clazz, FieldDecorator fieldDecorator, WebClient webClient) throws Exception {
        for (Field field : clazz.getDeclaredFields()) {
            if (CustomWebElement.class.isAssignableFrom(field.getType())) {
                field.setAccessible(true);
                CustomWebElement customWebElement = (CustomWebElement) field.get(object);
                if (customWebElement == null) {
                    customWebElement = (CustomWebElement) field.getType().getConstructor().newInstance();
                }
                field.set(object, customWebElement);

                // if the custom element has itself WebElement , let's dot it again
                // we do it before assigning the proxy as our default webElement has no @FindBy annotation 
                PageFactory.initElements(new DefaultElementLocatorFactory(webClient.webDriver), customWebElement);
                setupCustomWebElements(customWebElement, webClient);

                customWebElement.webClient = webClient;
            }
        }
        if (clazz.getSuperclass() != null) {
            setupCustomWebElementsForClass(object, clazz.getSuperclass(), fieldDecorator, webClient);
        }
    }

    private Object initPage(Field field, WebClient webClient) throws Exception {
        Object page = createPage(field, webClient);
        setupCustomWebElements(page, webClient);
        buildPages(page, page.getClass(), webClient);
        injectWebClient(page, page.getClass(), webClient);
        return page;
    }

    private void injectWebClient(Object page, Class<?> clazz, WebClient webClient) throws Exception {
        for (Field field : clazz.getDeclaredFields()) {
            if (WebClient.class.isAssignableFrom(field.getType())) {
                field.setAccessible(true);
                field.set(page, webClient);
            }
        }
        if (clazz.getSuperclass() != null) {
            injectWebClient(page, clazz.getSuperclass(), webClient);
        }
    }

    private Object createPage(Field field, WebClient webClient) throws ClassNotFoundException {
        return PageFactory.initElements(webClient.webDriver, Class.forName(field.getType().getName()));
    }

    private static class AnotherFieldDecorator implements FieldDecorator {

        protected ElementLocatorFactory factory;

        public AnotherFieldDecorator(ElementLocatorFactory factory) {
            this.factory = factory;
        }

        @Override
        public Object decorate(ClassLoader loader, Field field) {
            ElementLocator locator = factory.createLocator(field);
            return locator == null ? null : proxyForLocator(loader, locator);
        }

        protected WebElement proxyForLocator(ClassLoader loader, ElementLocator locator) {
            InvocationHandler handler = new LocatingElementHandler(locator);
            return (WebElement) Proxy.newProxyInstance(loader, new Class<?>[] { WebElement.class, WrapsElement.class, Locatable.class }, handler);
        }
    }
}