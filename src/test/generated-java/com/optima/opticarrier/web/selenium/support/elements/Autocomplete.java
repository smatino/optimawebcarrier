/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Autocomplete.p.vm.java
 */
package com.optima.opticarrier.web.selenium.support.elements;

import static com.google.common.collect.Lists.newArrayList;
import static com.palominolabs.xpath.XPathUtils.getXPathString;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

public class Autocomplete extends ByCustomWebElement {
    private final By byInput;
    private final String xPathId;
    private final String xPathIdPanel;

    public Autocomplete(String id) {
        super(id);
        this.byInput = By.id(id + "_input");
        this.xPathId = getXPathString(id);
        this.xPathIdPanel = getXPathString(id + "_panel");
    }

    public List<String> autocompleteValues(String match) {
        webClient.fill(byInput, match);
        waitForCompletionPanel();
        List<String> ret = newArrayList();
        for (WebElement webElement : webClient.findAll(By.xpath("//div[@id=" + xPathIdPanel + "]/*/li"))) {
            ret.add(webElement.getText());
        }
        webClient.find(byInput).clear();
        return ret;
    }

    public void type(String text) {
        complete(text, text);
    }

    public void complete(String text, String match) {
        webClient.message("Autocomplete " + text + " and select " + match);
        webClient.fill(byInput, text);
        waitForCompletionPanel();
        String matchedLi = "//div[@id=" + xPathIdPanel + "]/ul/li[@data-item-label=" + getXPathString(match) + "]";
        webClient.click(By.xpath(matchedLi));
    }

    private void waitForCompletionPanel() {
        webClient.waitUntilDisplayed(By.xpath("//div[@id=" + xPathIdPanel + "]"));
        webClient.waitUntilDisplayed(By.xpath("//div[@id=" + xPathIdPanel + "]/ul"));
    }

    public void delete(String value) {
        if (!values().contains(value)) {
            return;
        }
        String xpath = "//div[@id=" + xPathId + "]//span[@class='ui-autocomplete-token-label' and text()=" + getXPathString(value)
                + "]/../span[@class='ui-autocomplete-token-icon ui-icon ui-icon-close']";
        for (WebElement webElement : webClient.findAll(By.xpath(xpath))) {
            webElement.click();
        }

        String stillInContainer = "//div[@id=" + xPathId
                + "]/ul[contains(@class,'ui-autocomplete-multiple-container')]/li/span[@class='ui-autocomplete-token-label' and text()="
                + getXPathString(value) + "]";
        webClient.waitUntilRemoved(By.xpath(stillInContainer));
    }

    public List<String> values() {
        List<String> ret = newArrayList();
        String spanValues = "//div[@id=" + xPathId
                + "]/ul[contains(@class,'ui-autocomplete-multiple-container')]/li/span[@class='ui-autocomplete-token-label']";
        for (WebElement webElement : webClient.findAllNow(By.xpath(spanValues))) {
            ret.add(webElement.getText());
        }
        return ret;
    }

    public void reset() {
        for (String value : values()) {
            delete(value);
        }
    }
}
